---
- name: Ensure project exists - {{ proj.name }}
  ansible.builtin.stat:
    path: "{{ proj.path }}"
  register: proj_stat

- name: Fail if project path is missing - {{ proj.name }}
  ansible.builtin.fail:
    msg: "Project {{ proj.name }} path '{{ proj.path }}' does not exist."
  when: not proj_stat.stat.exists

- name: Create artifact dir for {{ proj.name }}
  ansible.builtin.file:
    path: "{{ artifacts_root_abs }}/{{ proj.name }}"
    state: directory
    mode: "0755"

- name: Terraform init - {{ proj.name }}
  ansible.builtin.command:
    cmd: bash ../../scripts/init.sh {{ proj.name }}
    chdir: "{{ proj.path }}"
  environment: "{{ tf_env }}"
  register: tf_init
  changed_when: "'successfully initialized' in (tf_init.stdout | lower) or 'initialized' in (tf_init.stderr | lower)"

- name: Terraform validate - {{ proj.name }}
  ansible.builtin.command:
    cmd: terraform validate
    chdir: "{{ proj.path }}"
  environment: "{{ tf_env }}"

- name: Terraform plan (binary) - {{ proj.name }}
  ansible.builtin.command:
    cmd: terraform plan -input=false -out "{{ artifacts_root_abs }}/{{ proj.name }}/plan.tfplan"
    chdir: "{{ proj.path }}"
  environment: "{{ tf_env }}"
  register: tf_plan_bin
  changed_when: true

- name: Show human-readable plan in console - {{ proj.name }}
  ansible.builtin.command:
    cmd: terraform show -no-color "{{ artifacts_root_abs }}/{{ proj.name }}/plan.tfplan"
    chdir: "{{ proj.path }}"
  environment: "{{ tf_env }}"
  register: tf_plan_txt
  changed_when: false

- name: Display plan output - {{ proj.name }}
  ansible.builtin.debug:
    msg: "{{ tf_plan_txt.stdout_lines }}"

- name: Pause for manual review/confirmation - {{ proj.name }}
  ansible.builtin.pause:
    prompt: "Type 'apply' to apply {{ proj.name }}, 'skip' to skip, or anything else to re-prompt."
  register: user_choice
  until: user_choice.user_input in ['apply', 'skip']
  retries: 3
  delay: 0

- name: Apply plan - {{ proj.name }}
  ansible.builtin.command:
    cmd: terraform apply -input=false "{{ artifacts_root_abs }}/{{ proj.name }}/plan.tfplan"
    chdir: "{{ proj.path }}"
  environment: "{{ tf_env }}"
  when: user_choice.user_input == 'apply'

- name: Display terraform apply output - {{ proj.name }}
  ansible.builtin.debug:
    msg: "{{ tf_apply.stdout_lines }}"
  when: user_choice.user_input == 'apply'

- name: Skipped apply - {{ proj.name }}
  ansible.builtin.debug:
    msg: "Skipped applying {{ proj.name }}."
  when: user_choice.user_input == 'skip'
